{"version":3,"file":"static/js/298.2cd01e3f.chunk.js","mappings":"oRAeMA,GAAsBC,EAAAA,EAAAA,OAAK,kBAAM,6BAA2B,IAEnD,SAASC,EAAUC,GAAmB,IAAhBC,EAAWD,EAAXC,YACnCC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC1BI,GAAkBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BF,cACRG,GAAoCF,EAAAA,EAAAA,YAAWG,EAAAA,GAAvCC,EAAUF,EAAVE,WAAYC,EAAWH,EAAXG,YAEpBC,GAAiDC,EAAAA,EAAAA,GAC/CF,EAAYG,KACZhB,GACDiB,GAAAb,EAAAA,EAAAA,GAAAU,EAAA,GAHMI,EAAID,EAAA,GAAEE,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAAEI,EAAOJ,EAAA,GAYvCK,GAAiBC,EAAAA,EAAAA,cAAY,WACjC,IAAIC,EAAQ,CAAC,EAAGxB,GAChB,GAAa,IAATkB,EAAY,CACd,IAAMO,GAAcP,EAAO,GAAKlB,EAChCwB,EAAQA,EAAME,KAAI,SAACC,GAAC,OAAKA,EAAIF,CAAU,GACzC,CACA,IAAMG,EAAUhB,EAAWiB,MAAML,EAAM,GAAIA,EAAM,IACjDlB,EAAesB,EACjB,GAAG,CAACV,EAAMlB,EAAaM,EAAgBM,KAEvCkB,EAAAA,EAAAA,YAAU,YAEHlB,GAAcC,GAAaN,GAElC,GAAG,CAACK,EAAYL,KAEhBuB,EAAAA,EAAAA,YAAU,WACRR,GACF,GAAG,CAACJ,EAAMI,KAEVQ,EAAAA,EAAAA,YAAU,WACHzB,EAAY0B,QAAmB,IAATb,GAAYG,EAAQH,EAAO,EAExD,GAAG,CAACb,EAAY0B,OAAQV,IAExB,IAAMW,GACJC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,GAAI,CAAEC,MAAO,eAAgBC,QAAS,GACtCC,QAAQ,KAAIC,SACb,2CAKH,OAAOlC,GACLmC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,QAAS,EAAEH,SAAA,EAChBN,EAAAA,EAAAA,KAACrC,EAAmB,CAACoB,KAAMH,EAAYG,QACvCwB,EAAAA,EAAAA,MAACG,EAAAA,GAAI,CACHC,WAAS,EACTC,UAAW,MACXH,QAAS,EACTI,YAAa,QAAQP,SAAA,CAEpBlC,EAAY0B,OACT1B,EAAYqB,KAAI,SAACqB,GAAC,OAChBd,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAEHK,MAAI,EAAAT,UAEJN,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,CACPC,KAAMH,EACNI,eAAa,KALVJ,EAAEK,GAOF,IAETpB,EACHb,EAAY,GACXc,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CACHK,MAAI,EACJK,GAAI,GAAGd,UAEPN,EAAAA,EAAAA,KAACqB,EAAAA,EAAiB,CAChBpC,KAAMA,EACNE,aAAcA,EACdD,UAAWA,MAGb,YAIRc,EAAAA,EAAAA,KAACsB,EAAAA,EAAkB,CAACvD,YAAaA,GAErC,C","sources":["components/games/Collection.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  lazy,\n  useContext,\n  useCallback,\n} from 'react';\nimport DataContext from '../../context/DataContext';\nimport UserContext from '../../context/UserContext';\nimport { Grid, Stack, Typography } from '@mui/material';\nimport GameCard from './GameCard';\nimport ResultsPagination from '../common/ResultsPagination';\nimport usePagination from '../../hooks/usePagination';\nimport CollectionSkeleton from './CollectionSkeleton';\n\nconst CollectionStatsComp = lazy(() => import('./CollectionStats'));\n\nexport default function Collection({ itemsOnPage }) {\n  const [pageContent, setPageContent] = useState('');\n  const { getCollection } = useContext(DataContext);\n  const { collection, userGameIDs } = useContext(UserContext);\n\n  const [page, pageCount, handleChange, setPage] = usePagination(\n    userGameIDs.size,\n    itemsOnPage\n  );\n  /** Get current page content\n   *\n   * @returns {*} [ game, ... ]\n   *\n   * slices games from collection with set range\n   *\n   * range is calculated with itemsOnPage, page, and skipAmount\n   */\n  const getPageContent = useCallback(() => {\n    let range = [0, itemsOnPage];\n    if (page !== 1) {\n      const skipAmount = (page - 1) * itemsOnPage;\n      range = range.map((n) => n + skipAmount);\n    }\n    const content = collection.slice(range[0], range[1]);\n    setPageContent(content);\n  }, [page, itemsOnPage, setPageContent, collection]);\n\n  useEffect(() => {\n    // if no collection set, GET request to API with userGameIDs\n    if (!collection && userGameIDs) getCollection();\n    // eslint-disable-next-line\n  }, [collection, getCollection]);\n\n  useEffect(() => {\n    getPageContent();\n  }, [page, getPageContent]);\n\n  useEffect(() => {\n    if (!pageContent.length && page !== 1) setPage(page - 1);\n    // eslint-disable-next-line\n  }, [pageContent.length, setPage]);\n\n  const noGamesMsg = (\n    <Typography\n      sx={{ color: 'primary.text', padding: 3 }}\n      variant='h5'\n    >\n      There are no games in your collection.\n    </Typography>\n  );\n\n  return pageContent ? (\n    <Stack spacing={2}>\n      <CollectionStatsComp size={userGameIDs.size} />\n      <Grid\n        container\n        direction={'row'}\n        spacing={3}\n        paddingLeft={'.5rem'}\n      >\n        {pageContent.length\n          ? pageContent.map((g) => (\n              <Grid\n                key={g.id}\n                item\n              >\n                <GameCard\n                  game={g}\n                  onProfilePage\n                />\n              </Grid>\n            ))\n          : noGamesMsg}\n        {pageCount > 1 ? (\n          <Grid\n            item\n            xs={12}\n          >\n            <ResultsPagination\n              page={page}\n              handleChange={handleChange}\n              pageCount={pageCount}\n            />\n          </Grid>\n        ) : null}\n      </Grid>\n    </Stack>\n  ) : (\n    <CollectionSkeleton itemsOnPage={itemsOnPage} />\n  );\n}\n"],"names":["CollectionStatsComp","lazy","Collection","_ref","itemsOnPage","_useState","useState","_useState2","_slicedToArray","pageContent","setPageContent","getCollection","useContext","DataContext","_useContext2","UserContext","collection","userGameIDs","_usePagination","usePagination","size","_usePagination2","page","pageCount","handleChange","setPage","getPageContent","useCallback","range","skipAmount","map","n","content","slice","useEffect","length","noGamesMsg","_jsx","Typography","sx","color","padding","variant","children","_jsxs","Stack","spacing","Grid","container","direction","paddingLeft","g","item","GameCard","game","onProfilePage","id","xs","ResultsPagination","CollectionSkeleton"],"sourceRoot":""}